using System;
using System.Diagnostics;
using System.IO;
using System.Windows.Forms;

namespace SpringfieldApp
{
    public partial class SpringfieldApp : Form
    {
        OpenFileDialog oft = new OpenFileDialog();

        // pathDOC is the the LOCATION of the document user selected
        string pathDOC;

        // fileNameDOC is the NAME of the document user selected
        string fileNameDOC;

        // Location of python.exe                               --EDIT-THIS
        string pythonPath = "C:\\Users\\Wel11\\AppData\\Local\\Programs\\Python\\Python36-32\\python.exe";

        // Location of pythonScript                             --EDIT-THIS
        string scriptPath = "D:\\Harsh's Programs\\App\\C#Frontend\\testScript.py";

        // Location for temp Processed file to store            --EDIT-THIS
        string tempProcessedPath = "D:\\Harsh's Programs\\App\\C#Frontend\\tempProcessed.csv";

        // initalzing the App
        public SpringfieldApp()
        {
            InitializeComponent();
            show.Enabled = false;
            process.Enabled = false;
            create.Enabled = false;
        }

        // clickListener for BROWSE Button
        private void browse_Click(object sender, EventArgs e)
        {
            oft.Filter = "DOCUMENT " +
                "(*.pdf, *.csv, *.tsv, *.psv, *.doc, *.docx, *.txt, *.xls, *.xlsx) | " +
                "*.pdf; *.csv; *.tsv; *.psv; *.doc; *.docx; *.txt; *.xls; *.xlsx";

            if (oft.ShowDialog() == DialogResult.OK)
            {
                pathDOC = oft.FileName;
                fileNameDOC = oft.SafeFileName;
                browse.Text = fileNameDOC.ToUpper();

                process.Text = "PROCESS";
                process.Enabled = true;
                show.Enabled = false;
            }
        }

        // clickListener for PROCESS Button
        private void process_Click(object sender, EventArgs e)
        {
            // prompt user that processing has started
            process.Text = "PROCESSING";
            process.Enabled = false;

            // call the python script on the document
            // path of that pdf is pathDOC
            string output = run_cmd(scriptPath, pathDOC);
            process.Text = "DONE";

            // printing the output to console
            Console.WriteLine(output);
         
            // once the processing is done
            show.Enabled = true;
            create.Enabled = true;

            // and save the processed file as document someWhere
            File.WriteAllText(tempProcessedPath, output);
        }

        // clickListener for SHOW Button
        private void show_Click(object sender, EventArgs e)
        {
            // open the processed csv file
            Process.Start(tempProcessedPath);
        }

        // method for calling python script
        public string run_cmd(string cmd, string args)
        {
            ProcessStartInfo start = new ProcessStartInfo();
            start.FileName = pythonPath;
            start.Arguments = string.Format("\"{0}\" \"{1}\"", cmd, args);

            start.UseShellExecute = false;// Do not use OS shell
            start.CreateNoWindow = true; // We don't need new window
            start.RedirectStandardOutput = true;// Any output, generated by application will be redirected back
            start.RedirectStandardError = true; // Any error in standard output will be redirected back (for example exceptions)

            using (Process process = Process.Start(start))
            {
                // Here are the exceptions from our Python script
                string stderr = process.StandardError.ReadToEnd();

                // Here is the result of StdOut(for example: print("test"))
                return process.StandardOutput.ReadToEnd();
            }
        }

        private void create_Click(object sender, EventArgs e)
        {
            if(create.Enabled == true)
            {
                this.Hide();
                RulePage rulePage = new RulePage();
                rulePage.ShowDialog();
            }
        }
    }
}