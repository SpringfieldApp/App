using System;
using System.Collections;
using System.ComponentModel;
using System.Drawing;
using System.Data;
using System.Linq;
using System.Text;
using System.Threading.Tasks;
using System.Windows.Forms;
using System.Diagnostics;
using System.IO;

namespace SpringField
{
    public partial class UploadProcessControl : UserControl
    {

        OpenFileDialog oft = new OpenFileDialog();

        ArrayList arguments;
        int xLoc = 75, yLoc = 10;

        string opPath = @"D:\Yash\Codes\SpringField\App\PythonBackend\temp_outputs";
        string pyPath = @"C:\Users\Yash\AppData\Local\Programs\Python\Python36-32\python.exe";
        string scriptPath = @"D:\Yash\Codes\SpringField\App\PythonBackend\springfield.py";
        
        public void updateCombo()
        {
            DocType.Items.Clear();
            string line;
            StreamReader file = new StreamReader(@"D:\Yash\Codes\SpringField\App\C#Frontend\types\types.txt");
            while ((line = file.ReadLine()) != null)
                DocType.Items.Add(line);
            file.Close();
        }

        public UploadProcessControl()
        {
            InitializeComponent();
            arguments = new ArrayList();
            Browse.Enabled = false;
            Process.Enabled = false;
            Show.Enabled = false;
        }

        private void Process_Click(object sender, EventArgs e)
        {
            // prompt user that processing has started
            Process.Text = "PROCESSING";
            Process.Enabled = false;

            // call the python script on the document
            // path of that pdf is pathDOC
            string output = run_cmd(scriptPath, Array.ConvertAll(arguments.ToArray(), x => x.ToString()));
            Process.Text = "DONE";

            // printing the output to console
            Debug.WriteLine(output);

            // once the processing is done
            Show.Enabled = true;
        }

        private void Show_Click(object sender, EventArgs e)
        {
            System.Diagnostics.Process.Start(opPath);
        }

        private void Browse_Click(object sender, EventArgs e)
        {
            oft.Filter = "DOCUMENT " +
                "(*.pdf, *.csv, *.tsv, *.psv, *.docx, *.txt, *.xls, *.xlsx, *.json, *.jpeg, *.png, *.log, *.jpg) | " +
                "*.pdf; *.csv; *.tsv; *.psv; *.docx; *.txt; *.xls; *.xlsx; *.json; *.jpeg; *.png; *.log; *.jpg";

            if (oft.ShowDialog() == DialogResult.OK)
            {
                arguments.Add(oft.FileName);
                arguments.Add(DocType.Text);

                Label fileLab = new Label();
                fileLab.Width = 190;
                fileLab.Location = new Point(xLoc, yLoc);
                fileLab.Text = oft.SafeFileName.ToUpper();
                this.DetailsPanel.Controls.Add(fileLab);

                Label typeLab = new Label();
                typeLab.Width = 190;
                typeLab.Location = new Point(xLoc + 200, yLoc);
                typeLab.Text = DocType.Text.ToUpper();
                this.DetailsPanel.Controls.Add(typeLab);

                yLoc += 30;
                Process.Enabled = true;
            }
        }

        private void DocType_SelectedIndexChanged(object sender, EventArgs e)
        {
            Browse.Enabled = true;
            Process.Enabled = false;
            Show.Enabled = false;
            Process.Text = "PROCESS";
        }

        // method for calling python script
        public string run_cmd(string cmd, string[] args)
        {
            string args_as_string = "";
            for (int i = 0; i < args.Length; i++)
            {
                args_as_string += "\"" + args[i] + "\" ";
            }
            args_as_string.Trim();

            ProcessStartInfo start = new ProcessStartInfo();
            start.FileName = pyPath;
            start.Arguments = string.Format("\"{0}\" {1}", cmd, args_as_string);

            start.UseShellExecute = false;// Do not use OS shell
            start.CreateNoWindow = true; // We don't need new window
            start.RedirectStandardOutput = true;// Any output, generated by application will be redirected back
            start.RedirectStandardError = true; // Any error in standard output will be redirected back (for example exceptions)

            using (Process process = System.Diagnostics.Process.Start(start))
            {
                // Here are the exceptions from our Python script
                string stderr = process.StandardError.ReadToEnd();

                // Here is the result of StdOut(for example: print("test"))
                return process.StandardOutput.ReadToEnd();
            }
        }
    }
}
